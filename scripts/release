#!/usr/bin/env ruby
# encoding: utf-8

GEMSPEC_NAME      = 'nanoc.gemspec'
VERSION_FILE      = './lib/nanoc/version'
VERSION_CONSTANT  = 'Nanoc::VERSION'
GITHUB_REPOSITORY = 'nanoc/nanoc'
GEM_NAME          = 'nanoc'

require 'fileutils'
require 'octokit'
require_relative './dd-releaser/lib/dd-releaser'

gem_cmd = DDReleaser::GemCmd.obtain

def run(*args)
  puts 'I will execute the following:'
  puts '    ' + args.map { |a| a =~ /\s/ ? a.inspect : a }.join(' ')
  print 'Is this correct? [y/N] '
  res = gets
  unless res.strip.casecmp('y').zero?
    $stderr.puts 'Answer was not Y; release aborted.'
    exit 1
  end

  system('echo', *args)
  system(*args)

  print 'Continue? [y/N] '
  res = gets
  unless res.strip.casecmp('y').zero?
    $stderr.puts 'Answer was not Y; release aborted.'
    exit 1
  end
end

puts '=== Reading version…'
require VERSION_FILE
version = eval(VERSION_CONSTANT)
puts "Version = #{version}"
puts

puts '=== Verifying presence of release date…'
unless File.readlines('NEWS.md').drop(2).first =~ / \(\d{4}-\d{2}-\d{2}\)$/
  $stderr.puts 'No proper release date found!'
  exit 1
end
puts

puts '=== Reading release notes…'
release_notes =
  File.readlines('NEWS.md')
      .drop(4)
      .take_while { |l| l !~ /^## / }
      .join
puts

puts '=== Logging in to GitHub’s API…'
client = Octokit::Client.new(netrc: true)
puts

puts '=== Verifying that release does not yet exist…'
releases = client.releases(GITHUB_REPOSITORY)
release = releases.find { |r| r.tag_name == version }
if release
  $stderr.puts 'Release already exists!'
  $stderr.puts 'ABORTED!'
  exit 1
end
puts

puts '=== Deleting old *.gem files…'
Dir['*.gem'].each do |fn|
  puts "  #{fn}…"
  FileUtils.rm_f(fn)
end
puts

puts '=== Building new gem…'
gem_cmd.build("#{GEM_NAME}.gemspec")
puts

puts '=== Creating Git tag…'
run('git', 'tag', '--sign', '--annotate', version, '--message', "Version #{version}")
puts

puts '=== Pushing Git data…'
run('git', 'push', 'origin')
run('git', 'push', 'origin', '--tags')
puts

puts '=== Pushing gem…'
gem_cmd.push("#{GEM_NAME}-#{version}.gemspec")
puts

puts '=== Creating release on GitHub…'
sleep 3 # Give GitHub some time to detect the new tag
is_prerelease = version =~ /a|b|rc/ || version =~ /^0/
client.create_release(
  GITHUB_REPOSITORY, version,
  prerelease: !!is_prerelease,
  body: release_notes
)
puts

puts 'DONE!'
